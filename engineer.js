// ICONA 2.0 Learning Platform - Construction Engineer Module
// Application data from JSON. Changed to 'let' to allow loading from localStorage.
let courseData = {
    title: "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É",
    totalSections: 6,
    currentSection: 2,
    progress: 33,
    timeSpent: "45 –º–∏–Ω—É—Ç",
    sections: [
        {
            id: 1,
            title: "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é",
            status: "completed",
            type: "theory",
            duration: "15 –º–∏–Ω",
            icon: "üìñ",
            description: "–û–±–∑–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É, –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã.",
            content: `
                <div class="content-section">
                    <h4>–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É</h4>
                    <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É ‚Äî –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏. –≠—Ç–æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ñ–∏–≥—É—Ä–æ–π –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞, –æ—Ç –∑–∞–º—ã—Å–ª–∞ –¥–æ —Å–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º.</p>
                    
                    <div class="key-points mt-24">
                        <h5>–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</h5>
                        <ul>
                            <li>–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.</li>
                            <li>–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ä–∞–±–æ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.</li>
                            <li>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –º–µ—Ä –ø–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é —Ç–µ—Ö–Ω–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ.</li>
                            <li>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏.</li>
                            <li>–í–µ–¥–µ–Ω–∏–µ –∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –≤—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏ –æ—Ç—á–µ—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.</li>
                        </ul>
                    </div>
                    
                    <h5 class="mt-24">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ —Ä–∞–±–æ—Ç–µ</h5>
                    <p class="mt-16">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∂–µ–Ω–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ BIM (Building Information Modeling), –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∑–¥–∞–Ω–∏–π. –≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã, –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã –∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—ä–µ–∫—Ç–∞.</p>
                    
                    <div class="success-message mt-16">
                        <strong>–ö–ª—é—á–µ–≤–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:</strong> –ò–Ω–∂–µ–Ω–µ—Ä –Ω–µ—Å–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏ –∏—Ç–æ–≥–æ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
                    </div>
                </div>
            `
        },
        {
            id: 2,
            title: "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞",
            status: "current",
            type: "video",
            duration: "20 –º–∏–Ω",
            icon: "üé•",
            description: "–î–µ—Ç–∞–ª—å–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –∏–Ω–∂–µ–Ω–µ—Ä–∞ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏.",
            content: `
                <div class="content-section">
                    <h4>–í–∏–¥–µ–æ—É—Ä–æ–∫: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞</h4>
                    <p>–≠—Ç–æ—Ç –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ—Å–≤—è—â–µ–Ω –¥–µ—Ç–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–±–æ—Ä—É –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ.</p>
                    
                    <div class="video-container">
                        <video id="videoPlayer" controls style="display: none; width: 100%; max-height: 400px;"></video>
                        <div id="videoPlaceholder" class="video-placeholder">
                            <div class="video-placeholder-icon">üé•</div>
                            <h4>–í–∏–¥–µ–æ: –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞</h4>
                            <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ.</p>
                            <input type="file" id="videoUpload" accept="video/*" style="display: none;" onchange="handleVideoUpload(event)">
                            <button class="play-button" onclick="document.getElementById('videoUpload').click()">üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ</button>
                        </div>
                    </div>
                    
                    <div class="mt-24">
                        <h5>–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</h5>
                        <ul>
                            <li>–†–æ–ª—å –∏–Ω–∂–µ–Ω–µ—Ä–∞ –≤ –ø—Ä–µ–¥–ø—Ä–æ–µ–∫—Ç–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.</li>
                            <li>–ú–µ—Ç–æ–¥—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ä—è–¥–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π.</li>
                            <li>–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –∏ —á–µ–∫-–ª–∏—Å—Ç—ã –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞.</li>
                            <li>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º.</li>
                        </ul>
                    </div>
                    
                    <div class="mt-16">
                        <details>
                            <summary><strong>–¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç –≤–∏–¥–µ–æ</strong></summary>
                            <p class="mt-8">–î–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π.</p>
                        </details>
                    </div>
                </div>
            `
        },
        {
            id: 3,
            title: "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
            status: "locked",
            type: "interactive",
            duration: "25 –º–∏–Ω",
            icon: "üìã",
            description: "–û—Å–≤–æ–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π.",
            content: `
                <div class="content-section">
                    <h4>–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å: –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h4>
                    <p>–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –æ—Å–≤–æ–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ—Å—Ç–∞–≤ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –µ–µ –≤–∏–¥–∞–º–∏.</p>
                    
                    <div class="interactive-demo">
                        <h5>üìã –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h5>
                        <p>–ò–∑—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º—É –∫–µ–π—Å—É.</p>
                        <button class="demo-button" onclick="launchInteractiveDemo()">–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä</button>
                    </div>
                    
                    <div class="mt-24">
                        <h5>–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:</h5>
                        <div class="practice-exercises">
                            <div class="exercise-card">
                                <h6>–†–∞–∑–¥–µ–ª –ê–† (–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è)</h6>
                                <p>–ü–æ–¥—Ä–æ–±–Ω—ã–µ –ø–ª–∞–Ω—ã, —Ñ–∞—Å–∞–¥—ã, —Ä–∞–∑—Ä–µ–∑—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞.</p>
                                <button class="exercise-button" onclick="showDocumentExample('drawings')">–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä</button>
                            </div>
                            <div class="exercise-card">
                                <h6>–†–∞–∑–¥–µ–ª –ö–† (–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è)</h6>
                                <p>–†–∞—Å—á–µ—Ç—ã –∏ —á–µ—Ä—Ç–µ–∂–∏ –Ω–µ—Å—É—â–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–¥–∞–Ω–∏—è.</p>
                                <button class="exercise-button" onclick="showDocumentExample('estimates')">–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä</button>
                            </div>
                            <div class="exercise-card">
                                <h6>–°–º–µ—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h6>
                                <p>–†–∞—Å—á–µ—Ç –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞, –≤–∫–ª—é—á–∞—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–∞–±–æ—Ç—ã.</p>
                                <button class="exercise-button" onclick="showDocumentExample('specs')">–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä</button>
                            </div>
                        </div>
                    </div>
                </div>
            `
        },
        {
            id: 4,
            title: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä",
            status: "locked",
            type: "theory",
            duration: "18 –º–∏–Ω",
            icon: "üîç",
            description: "–ü—Ä–∏–Ω—Ü–∏–ø—ã –∏ –º–µ—Ç–æ–¥—ã –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–¥–∑–æ—Ä–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.",
            content: `
                <div class="content-section">
                    <h4>–û—Å–Ω–æ–≤—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–¥–∑–æ—Ä–∞ –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ</h4>
                    <p>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä ‚Äî —ç—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ-–ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, —Ü–µ–ª—å—é –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, —Å—Ä–æ–∫–æ–≤, –±—é–¥–∂–µ—Ç–∞, –∞ —Ç–∞–∫–∂–µ –≤—ã—Å–æ–∫–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.</p>
                    
                    <div class="key-points mt-24">
                        <h5>–ö–ª—é—á–µ–≤—ã–µ –∑–∞–¥–∞—á–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–¥–∑–æ—Ä–∞:</h5>
                        <ul>
                            <li>–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–±–æ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –ø—Ä–æ–µ–∫—Ç–Ω–æ-—Å–º–µ—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∞–∫—Ç–∞–º (–°–ù–∏–ü, –ì–û–°–¢).</li>
                            <li>–í—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –∏–∑–¥–µ–ª–∏–π –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.</li>
                            <li>–ù–∞–¥–∑–æ—Ä –∑–∞ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.</li>
                            <li>–û—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–µ–º–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.</li>
                            <li>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ, –≤—ã—è–≤–ª–µ–Ω–∏–µ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π.</li>
                        </ul>
                    </div>
                    
                    <h5 class="mt-24">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h5>
                    <p class="mt-16">–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ —Ç–µ—Ö–Ω–∞–¥–∑–æ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞–∫ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (–Ω–∏–≤–µ–ª–∏—Ä—ã, —Ç–µ–æ–¥–æ–ª–∏—Ç—ã, –¥–µ—Ñ–µ–∫—Ç–æ—Å–∫–æ–ø—ã), —Ç–∞–∫ –∏ –º–µ—Ç–æ–¥—ã –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –û—Å–Ω–æ–≤–æ–π –µ–≥–æ —Ä–∞–±–æ—Ç—ã —è–≤–ª—è–µ—Ç—Å—è –≤–µ–¥–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç, –∞ —Ç–∞–∫–∂–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–æ–≤ –æ—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞–Ω–∏—è.</p>
                    
                    <div class="info-message mt-16">
                        <strong>–í–∞–∂–Ω–æ:</strong> –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä —è–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
                    </div>
                </div>
            `
        },
        {
            id: 5,
            title: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è",
            status: "locked",
            type: "practice",
            duration: "30 –º–∏–Ω",
            icon: "üõ†Ô∏è",
            description: "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞–Ω–∏–π –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —á–µ—Ä–µ–∑ —Ä–µ—à–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –∏ –∑–∞–¥–∞—á.",
            content: `
                <div class="content-section">
                    <h4>–ü—Ä–∞–∫—Ç–∏–∫—É–º: –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è</h4>
                    <p>–ó–∞–∫—Ä–µ–ø–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–∏–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.</p>
                    
                    <div class="practice-exercises">
                        <div class="exercise-card">
                            <h5>–ó–∞–¥–∞–Ω–∏–µ 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —á–µ—Ä—Ç–µ–∂–µ–π</h5>
                            <p>–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–¥–∞–Ω–∏—è –∏ –≤—ã—è–≤–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–ª–ª–∏–∑–∏–∏.</p>
                            <button class="exercise-button" onclick="completeExercise(1)">–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–¥–∞–Ω–∏—é</button>
                        </div>
                        <div class="exercise-card">
                            <h5>–ó–∞–¥–∞–Ω–∏–µ 2: –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</h5>
                            <p>–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Ç–æ–Ω–∞ (–º¬≥) –¥–ª—è –∑–∞–ª–∏–≤–∫–∏ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–º 10x12 –º, –≤—ã—Å–æ—Ç–æ–π 0.5 –º.</p>
                            <button class="exercise-button" onclick="completeExercise(2)">–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–¥–∞–Ω–∏—é</button>
                        </div>
                        <div class="exercise-card">
                            <h5>–ó–∞–¥–∞–Ω–∏–µ 3: –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤</h5>
                            <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç—Ä–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∏—Å–∫–∞, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.</p>
                            <button class="exercise-button" onclick="completeExercise(3)">–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–¥–∞–Ω–∏—é</button>
                        </div>
                    </div>
                    
                    <div class="success-message mt-24">
                        <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</strong> –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞–¥–∞–Ω–∏—è–º–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –≤–∏–¥–µ–æ-—Ä–∞–∑–¥–µ–ª–æ–≤.
                    </div>
                </div>
            `
        },
        {
            id: 6,
            title: "–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç",
            status: "locked",
            type: "test",
            duration: "15 –º–∏–Ω",
            icon: "üìù",
            description: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤ —Ö–æ–¥–µ –∏–∑—É—á–µ–Ω–∏—è –≤—Å–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –º–æ–¥—É–ª—è.",
            content: `
                <div class="content-section">
                    <h4>–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç</h4>
                    <p>–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è. –ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã, –∏–∑—É—á–µ–Ω–Ω—ã–µ –≤ –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ.</p>
                    
                    <div class="test-info">
                        <h5>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:</h5>
                        <ul>
                            <li><strong>–§–æ—Ä–º–∞—Ç:</strong> 3 –≤–æ–ø—Ä–æ—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.</li>
                            <li><strong>–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:</strong> 10 –º–∏–Ω—É—Ç.</li>
                            <li><strong>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong> 80% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.</li>
                            <li><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:</strong> –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.</li>
                        </ul>
                    </div>
                    
                    <div class="mt-24">
                        <button class="btn btn--primary btn--lg" onclick="startFinalTest()">–ù–∞—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
                    </div>
                </div>
            `
        }
    ],
    keyPoints: [
        "–ò–Ω–∂–µ–Ω–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤",
        "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç",
        "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
        "–°–æ–±–ª—é–¥–µ–Ω–∏–µ –Ω–æ—Ä–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    ],
    currentContent: {
        title: "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É",
        type: "video",
        description: "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã –∏–∑—É—á–∏–º –∫–ª—é—á–µ–≤—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É",
        videoUrl: "demo-video.mp4",
        duration: "12:34",
        transcript: "–î–æ—Å—Ç—É–ø–Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤–∏–¥–µ–æ..."
    }
};

// Test questions
let testQuestions = [
    {
        question: "–ö–∞–∫–æ–≤–∞ –≥–ª–∞–≤–Ω–∞—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä–∞ –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É?",
        options: [
            "–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏–π",
            "–ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç",
            "–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
            "–†–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
        ],
        correct: 1
    },
    {
        question: "–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä?",
        options: [
            "–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            "–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–∞"
        ],
        correct: 1
    },
    {
        question: "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É?",
        options: [
            "–¢–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ —á–µ—Ä—Ç–µ–∂–∏",
            "–ü—Ä–æ–µ–∫—Ç–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –æ—Ç—á–µ—Ç—ã",
            "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã",
            "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
        ],
        correct: 1
    }
];

// Application state
let currentSectionIndex = 0;
let completedSections = new Set();
let learningProgress = 0;
let timeSpentMinutes = 0;
let startTime = null;

// New global state for edit mode
let isEditMode = false;

const testState = {
    current: 0,
    answers: Array(testQuestions.length).fill(null),
    timer: null,
    timeLeft: 600 // 10 minutes
};

// DOM elements - will be initialized after DOM is ready
let pages = {};

// Initialize application
document.addEventListener("DOMContentLoaded", function() {
    console.log("DOM Content Loaded - Initializing ICONA 2.0 Learning Platform");
    
    // Initialize pages object after DOM is ready
    pages = {
        overview: document.getElementById("moduleOverviewPage"),
        learning: document.getElementById("learningPage"),
        test: document.getElementById("testPage"),
        certificate: document.getElementById("certificatePage")
    };
    
    console.log("Pages found:", {
        overview: !!pages.overview,
        learning: !!pages.learning,
        test: !!pages.test,
        certificate: !!pages.certificate
    });
    
    // Initialize the application
    initializeApp();
    attachEventListeners();
    
    addEditModeStyles(); // Add styles for edit mode
    console.log("Application initialized successfully");
});

document.addEventListener('DOMContentLoaded', function() {
  const isLoggedIn = localStorage.getItem('isLoggedIn') === '1' || localStorage.getItem('isLoggedIn') === 'true';
  if (!isLoggedIn) {
    let err = document.getElementById('auth-error-msg');
    if (!err) {
      err = document.createElement('div');
      err.id = 'auth-error-msg';
      err.textContent = '–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å';
      err.style.position = 'fixed';
      err.style.top = '24px';
      err.style.left = '50%';
      err.style.transform = 'translateX(-50%)';
      err.style.background = '#fff';
      err.style.color = '#d32f2f';
      err.style.border = '2px solid #d32f2f';
      err.style.borderRadius = '8px';
      err.style.padding = '1em 2em';
      err.style.fontWeight = '600';
      err.style.fontSize = '1.1em';
      err.style.zIndex = '9999';
      document.body.appendChild(err);
    }
    setTimeout(function() { window.location.href = 'index.html'; }, 1800);
  }
});

function initializeApp() {
    console.log("Initializing app...");
    
    loadCourseData(); // Load data from localStorage if available
    
    // Initialize progress based on course data
    learningProgress = courseData.progress;
    currentSectionIndex = courseData.currentSection - 1; // Convert to 0-based index
    
    // Mark completed sections
    courseData.sections.forEach((section, index) => {
        if (section.status === "completed") {
            completedSections.add(index);
        }
    });
    
    updateOverviewProgress();
    renderKeyPoints();
    
    console.log("Initial state:", {
        currentSectionIndex,
        completedSections: Array.from(completedSections),
        learningProgress
    });
}

function attachEventListeners() {
    console.log("Attaching event listeners...");
    
    // Get all elements
    const startBtn = document.getElementById("startLearningBtn");
    const backBtn = document.getElementById("backBtn");
    const prevBtn = document.getElementById("prevBtn");
    const nextBtn = document.getElementById("nextBtn");
    const testPrevBtn = document.getElementById("testPrevBtn");
    const testNextBtn = document.getElementById("testNextBtn");
    const finishTestBtn = document.getElementById("finishTestBtn");
    const downloadCertBtn = document.getElementById("downloadCertBtn");
    const backToModulesBtn = document.getElementById("backToModulesBtn");
    const bookmarkBtn = document.getElementById("bookmarkBtn");
    const shareBtn = document.getElementById("shareBtn");

    // Attach start button event listener
    if (startBtn) {
        startBtn.addEventListener("click", function(e) {
            console.log("Start learning button clicked");
            e.preventDefault();
            e.stopPropagation();
            startLearning();
        });
    } else {
        console.error("Start button not found! ID: startLearningBtn");
    }

    // Add Edit Mode button to the correct location within the learning page
    const learningHeader = document.querySelector("#learningPage .learning-header");
    if (learningHeader) {
        const editModeBtn = document.createElement("button");
        editModeBtn.id = "editModeBtn";
        editModeBtn.textContent = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å";
        editModeBtn.className = "btn btn--secondary btn--sm";
        editModeBtn.style.alignSelf = "flex-start"; // Align button nicely
        editModeBtn.addEventListener("click", toggleEditMode);
        learningHeader.appendChild(editModeBtn);
    } else {
        console.error("Learning header not found, could not add Edit Mode button.");
    }
    
    // Attach other event listeners
    if (backBtn) {
        backBtn.addEventListener("click", function(e) {
            console.log("Back button clicked");
            e.preventDefault();
            handleBackNavigation();
        });
    }
    
    if (prevBtn) {
        prevBtn.addEventListener("click", function(e) {
            console.log("Previous button clicked");
            e.preventDefault();
            navigateSection(-1);
        });
    }
    
    if (nextBtn) {
        nextBtn.addEventListener("click", function(e) {
            console.log("Next button clicked");
            e.preventDefault();
            navigateSection(1);
        });
    }
    
    if (testPrevBtn) {
        testPrevBtn.addEventListener("click", function(e) {
            e.preventDefault();
            navigateTestQuestion(-1);
        });
    }
    
    if (testNextBtn) {
        testNextBtn.addEventListener("click", function(e) {
            e.preventDefault();
            navigateTestQuestion(1);
        });
    }
    
    if (finishTestBtn) {
        finishTestBtn.addEventListener("click", function(e) {
            e.preventDefault();
            finishTest();
        });
    }
    
    if (downloadCertBtn) {
        downloadCertBtn.addEventListener("click", function(e) {
            e.preventDefault();
            downloadCertificate();
        });
    }
    
    if (backToModulesBtn) {
        backToModulesBtn.addEventListener("click", function(e) {
            e.preventDefault();
            showPage("overview");
        });
    }
    
    if (bookmarkBtn) {
        bookmarkBtn.addEventListener("click", function(e) {
            e.preventDefault();
            handleBookmark();
        });
    }
    
    if (shareBtn) {
        shareBtn.addEventListener("click", function(e) {
            e.preventDefault();
            handleShare();
        });
    }
    
    console.log("All event listeners attached successfully");
}

// Page navigation
function showPage(pageName) {
    console.log("Showing page:", pageName);
    
    try {
        // Hide all pages
        Object.values(pages).forEach(page => {
            if (page) {
                page.classList.remove("active");
            }
        });
        
        // Show selected page
        if (pages[pageName]) {
            pages[pageName].classList.add("active");
            console.log("Page switched to:", pageName);
        } else {
            console.error("Page not found:", pageName);
            return false;
        }
        
        return true;
    } catch (error) {
        console.error("Error switching pages:", error);
        return false;
    }
}

function handleBackNavigation() {
    const currentPage = getCurrentPage();
    console.log("Handling back navigation from:", currentPage);
    
    if (currentPage === "learning") {
        showPage("overview");
    } else if (currentPage === "test") {
        showPage("learning");
    } else if (currentPage === "certificate") {
        showPage("overview");
    }
}

function getCurrentPage() {
    return Object.entries(pages).find(([key, page]) => 
        page && page.classList.contains("active")
    )?.[0] || "overview";
}

// Learning functionality
function startLearning() {
    console.log("=== Starting learning session ===");
    
    try {
        // Set start time
        startTime = Date.now();
        
        // Show learning page
        const success = showPage("learning");
        if (!success) {
            throw new Error("Failed to show learning page");
        }
        
        // Initialize learning content
        renderCurrentSection();
        renderSidebarNavigation();
        updateAllProgress();
        startTimeTracking();
        
        console.log("Learning session started successfully");
        
    } catch (error) {
        console.error("Error starting learning:", error);
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
    }
}

function navigateSection(direction) {
    console.log("Navigating section:", direction);
    
    const newIndex = currentSectionIndex + direction;
    
    // Check bounds
    if (newIndex < 0 || newIndex >= courseData.sections.length) {
        console.log("Navigation out of bounds");
        return;
    }
    
    // Mark current section as completed when moving forward
    if (direction > 0) {
        completedSections.add(currentSectionIndex);
        updateLearningProgress();
    }
    
    // Check if trying to access locked section
    if (newIndex > currentSectionIndex && !completedSections.has(currentSectionIndex)) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É");
    return;
  }

    currentSectionIndex = newIndex;
    renderCurrentSection();
    renderSidebarNavigation();
    updateAllProgress();
    
    console.log("Section navigation completed:", currentSectionIndex);
}

function renderCurrentSection() {
    const section = courseData.sections[currentSectionIndex];
    console.log("Rendering section:", section.title);
    
    const sectionTitle = document.getElementById("sectionTitle");
    const sectionDescription = document.getElementById("sectionDescription");
    const learningBody = document.getElementById("learningBody");
    
    if (sectionTitle) {
        sectionTitle.textContent = `–†–∞–∑–¥–µ–ª ${section.id}: ${section.title}`;
        sectionTitle.contentEditable = isEditMode;
    }
    
    if (sectionDescription) {
        sectionDescription.textContent = section.description;
        sectionDescription.contentEditable = isEditMode;
    }
    
    if (learningBody) {
        learningBody.innerHTML = section.content;
        learningBody.contentEditable = isEditMode;
    }
    
    updateNavigationButtons();
}

function renderSidebarNavigation() {
    const container = document.getElementById("sidebarNavItems");
    if (!container) return;
    
    container.innerHTML = courseData.sections.map((section, index) => {
        let statusClass = "";
        if (index === currentSectionIndex) {
            statusClass = "active";
        } else if (completedSections.has(index)) {
            statusClass = "completed";
        } else if (index > currentSectionIndex) {
            statusClass = "locked";
        }
        
        return `
            <div class="sidebar-nav-item ${statusClass}" data-section="${index}">
                <span class="sidebar-nav-icon">${section.icon}</span>
                <div>
                    <div class="sidebar-nav-title" contenteditable="${isEditMode}">${section.title}</div>
                    <small>${section.duration}</small>
        </div>
      </div>
    `;
    }).join("");
    
    // Add click handlers
    container.querySelectorAll(".sidebar-nav-item").forEach(item => {
        item.addEventListener("click", function(e) {
            const sectionIndex = parseInt(this.dataset.section);
            console.log("Sidebar item clicked:", sectionIndex);
            
            if (isEditMode) return; // Disable navigation in edit mode
            
            if (sectionIndex <= currentSectionIndex || completedSections.has(sectionIndex - 1)) {
                currentSectionIndex = sectionIndex;
                renderCurrentSection();
                renderSidebarNavigation();
                updateAllProgress();
            } else {
                alert("–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É");
            }
      });
    });
}

function renderKeyPoints() {
    const keyPointsList = document.getElementById("keyPointsList");
    if (!keyPointsList) return;
    
    keyPointsList.innerHTML = courseData.keyPoints.map(point => 
        `<li>${point}</li>`
    ).join("");
}

function updateNavigationButtons() {
    const prevBtn = document.getElementById("prevBtn");
    const nextBtn = document.getElementById("nextBtn");
    
    if (prevBtn) {
        prevBtn.style.visibility = currentSectionIndex === 0 ? "hidden" : "visible";
    }
    
    if (nextBtn) {
        const isLastSection = currentSectionIndex === courseData.sections.length - 1;
        nextBtn.textContent = isLastSection ? "–ö —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç—É ‚Üí" : "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª ‚Üí";
    }
}

function updateAllProgress() {
    updateOverviewProgress();
    updateLearningProgress();
    updateCircularProgress();
}

function updateOverviewProgress() {
    const progressPercent = document.getElementById("progressPercent");
    const progressFill = document.getElementById("progressFill");
    
    if (progressPercent) {
        progressPercent.textContent = `${learningProgress}%`;
    }
    if (progressFill) {
        progressFill.style.width = `${learningProgress}%`;
    }
}

function updateLearningProgress() {
    const completed = completedSections.size;
    const total = courseData.sections.length;
    learningProgress = Math.round((completed / total) * 100);
    
    // Update header progress
    const headerProgressFill = document.getElementById("headerProgressFill");
    const headerProgressText = document.getElementById("headerProgressText");
    
    if (headerProgressFill) {
        headerProgressFill.style.width = `${learningProgress}%`;
    }
    if (headerProgressText) {
        headerProgressText.textContent = `${learningProgress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
    }
}

function updateCircularProgress() {
    const circularProgress = document.getElementById("circularProgress");
    const circularProgressValue = document.getElementById("circularProgressValue");
    
    if (circularProgress && circularProgressValue) {
        const angle = (learningProgress / 100) * 360;
        circularProgress.style.background = `conic-gradient(#dc3545 ${angle}deg, var(--color-secondary) ${angle}deg)`;
        circularProgressValue.textContent = `${learningProgress}%`;
    }
}

function startTimeTracking() {
    setInterval(() => {
        if (startTime) {
            timeSpentMinutes = Math.floor((Date.now() - startTime) / 60000);
            const timeSpentText = document.getElementById("timeSpentText");
            if (timeSpentText) {
                timeSpentText.textContent = `${timeSpentMinutes} –º–∏–Ω—É—Ç`;
            }
        }
    }, 60000); // Update every minute
}

function handleVideoUpload(event) {
    const file = event.target.files[0];
    if (file && file.type.startsWith('video/')) {
        const videoPlayer = document.getElementById('videoPlayer');
        const videoPlaceholder = document.getElementById('videoPlaceholder');
        
        if (videoPlayer && videoPlaceholder) {
            const videoUrl = URL.createObjectURL(file);
            videoPlayer.src = videoUrl;
            videoPlayer.style.display = 'block';
            videoPlaceholder.style.display = 'none';
            videoPlayer.play();
            
            videoPlayer.onended = () => {
                URL.revokeObjectURL(videoUrl);
            };
        }
    } else if (file) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.');
    }
}

// Interactive functions
function launchInteractiveDemo() {
    alert("–ó–∞–ø—É—â–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è! –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.");
}

function showDocumentExample(type) {
    const examples = {
        drawings: "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞–±–æ—á–∏—Ö —á–µ—Ä—Ç–µ–∂–µ–π",
        estimates: "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–∞ —Å–º–µ—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
        specs: "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π"
    };
    alert(examples[type] || "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏");
}

function completeExercise(exerciseNumber) {
    alert(`–ó–∞–¥–∞–Ω–∏–µ ${exerciseNumber} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –æ—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω.`);
}

function startSectionTest() {
    alert("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Å—Ç—É –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä–∞–∑–¥–µ–ª—É! –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç.");
}

function startFinalTest() {
    startTest();
}

function handleBookmark() {
    alert("–†–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–ª–∞–¥–∫–∏! –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
}

function handleShare() {
    alert("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–∑–¥–µ–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞! –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç –ø–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —à–∞—Ä–∏–Ω–≥–∞.");
}

// Test functionality
function startTest() {
    console.log("Starting test");
    completedSections.add(currentSectionIndex);
    updateAllProgress();
    
    showPage("test");
    testState.current = 0;
    testState.answers.fill(null);
    testState.timeLeft = 600;
    
    renderTestQuestion();
    updateTestProgress();
    startTestTimer();
}

function renderTestQuestion() {
    const question = testQuestions[testState.current];
    const testContent = document.getElementById("testContent");
    
    if (!testContent) return;
    
    const options = question.options.map((option, index) => {
        const isSelected = testState.answers[testState.current] === index;
        return `
            <label class="test-answer ${isSelected ? 'selected' : ''}">
                <input type="radio" name="testAnswer" value="${index}" ${isSelected ? 'checked' : ''}>
                <span class="test-answer-text">${option}</span>
            </label>
        `;
    }).join("");
    
    testContent.innerHTML = `
        <div class="test-question">
            <h3>–í–æ–ø—Ä–æ—Å ${testState.current + 1}</h3>
            <p>${question.question}</p>
            <div class="test-answers">${options}</div>
        </div>
    `;
    
    // Add event listeners
    testContent.querySelectorAll('input[name="testAnswer"]').forEach(radio => {
        radio.addEventListener('change', (e) => {
            testState.answers[testState.current] = parseInt(e.target.value);
            renderTestQuestion(); // Re-render to show selection
        });
    });
    
    updateTestNavigation();
}

function updateTestNavigation() {
    const testPrevBtn = document.getElementById("testPrevBtn");
    const testNextBtn = document.getElementById("testNextBtn");
    const finishTestBtn = document.getElementById("finishTestBtn");
    
    if (testPrevBtn) {
        testPrevBtn.style.visibility = testState.current === 0 ? "hidden" : "visible";
    }
    
    const isLastQuestion = testState.current === testQuestions.length - 1;
    
    if (testNextBtn) {
        testNextBtn.classList.toggle("hidden", isLastQuestion);
    }
    if (finishTestBtn) {
        finishTestBtn.classList.toggle("hidden", !isLastQuestion);
    }
}

function navigateTestQuestion(direction) {
    const newIndex = testState.current + direction;
    if (newIndex >= 0 && newIndex < testQuestions.length) {
        testState.current = newIndex;
        renderTestQuestion();
        updateTestProgress();
    }
}

function updateTestProgress() {
    const progress = Math.round(((testState.current + 1) / testQuestions.length) * 100);
    const testProgressFill = document.getElementById("testProgressFill");
    const testProgressText = document.getElementById("testProgressText");
    
    if (testProgressFill) {
        testProgressFill.style.width = `${progress}%`;
    }
    if (testProgressText) {
        testProgressText.textContent = `–í–æ–ø—Ä–æ—Å ${testState.current + 1} –∏–∑ ${testQuestions.length}`;
    }
}

function startTestTimer() {
    updateTestTimer();
    testState.timer = setInterval(() => {
        testState.timeLeft--;
        updateTestTimer();
        
        if (testState.timeLeft <= 0) {
            clearInterval(testState.timer);
        finishTest();
      }
    }, 1000);
}

function updateTestTimer() {
    const minutes = Math.floor(testState.timeLeft / 60);
    const seconds = testState.timeLeft % 60;
    const testTimer = document.getElementById("testTimer");
    
    if (testTimer) {
        testTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
  }

  function finishTest() {
    console.log("Finishing test");
    clearInterval(testState.timer);
    
    const correctAnswers = testState.answers.reduce((count, answer, index) => {
        return answer === testQuestions[index].correct ? count + 1 : count;
    }, 0);
    
    const score = Math.round((correctAnswers / testQuestions.length) * 100);
    
    if (score >= 80) {
        learningProgress = 100;
        updateAllProgress();
        showCertificate(score);
    } else {
        alert(`–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score}%. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 80%. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!`);
        // Reset test
        testState.current = 0;
        testState.answers.fill(null);
        testState.timeLeft = 600;
        renderTestQuestion();
        updateTestProgress();
        startTestTimer();
    }
}

// Certificate functionality
function showCertificate(score) {
    console.log("Showing certificate");
    const certificateDate = document.getElementById("certificateDate");
    const certificateScore = document.getElementById("certificateScore");
    
    if (certificateDate) {
        certificateDate.textContent = new Date().toLocaleDateString("ru-RU");
    }
    if (certificateScore) {
        certificateScore.textContent = `${score}%`;
    }
    
    showPage("certificate");
}

function downloadCertificate() {
    const certificateText = `
–°–ï–†–¢–ò–§–ò–ö–ê–¢ ICONA 2.0
–°–∏—Å—Ç–µ–º–∞ –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—É—á–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
"–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É"

–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${new Date().toLocaleDateString("ru-RU")}
–†–µ–∑—É–ª—å—Ç–∞—Ç: ${document.getElementById("certificateScore").textContent}

–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Å–≤–æ–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π:
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç
- –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –Ω–∞–¥–∑–æ—Ä
    `;
    
    const blob = new Blob([certificateText], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "certificate_icona_construction_engineer.txt";
    link.click();
    URL.revokeObjectURL(url);
    
    alert("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
}

// --- New functions for Edit Mode and Data Persistence ---

function toggleEditMode() {
    isEditMode = !isEditMode;
    const editBtn = document.getElementById('editModeBtn');

    if (!isEditMode) { // Exiting edit mode
        console.log("Saving changes...");

        // 1. Save sidebar titles
        const sidebarTitles = document.querySelectorAll('.sidebar-nav-title');
        sidebarTitles.forEach((titleEl, index) => {
            if (courseData.sections[index]) {
                courseData.sections[index].title = titleEl.textContent.trim();
            }
        });

        // 2. Save currently open section's main content
        const currentSection = courseData.sections[currentSectionIndex];
        const sectionTitleEl = document.getElementById("sectionTitle");
        const sectionDescriptionEl = document.getElementById("sectionDescription");
        const learningBodyEl = document.getElementById("learningBody");

        if (sectionTitleEl) {
            // Title is in format "–†–∞–∑–¥–µ–ª X: Title". We only want "Title".
            const titleText = sectionTitleEl.textContent.trim();
            currentSection.title = titleText.substring(titleText.indexOf(':') + 1).trim();
        }
        if (sectionDescriptionEl) {
            currentSection.description = sectionDescriptionEl.textContent.trim();
        }
        if (learningBodyEl) {
            currentSection.content = learningBodyEl.innerHTML;
        }

        saveCourseData();
        if (editBtn) {
            editBtn.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
            editBtn.classList.remove('btn--danger');
        }
        document.body.classList.remove('edit-mode-active');
        alert('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—Ä–∞—É–∑–µ—Ä–∞!');

    } else { // Entering edit mode
        if (editBtn) {
            editBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏';
            editBtn.classList.add('btn--danger');
        }
        document.body.classList.add('edit-mode-active');
        alert('–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.');
    }

    // Re-render views to apply/remove contentEditable attributes
    renderCurrentSection();
    renderSidebarNavigation();
}

function saveCourseData() {
    try {
        const dataToSave = JSON.stringify(courseData);
        localStorage.setItem('iconaCourseData', dataToSave);
        console.log("Course data saved to localStorage.");
    } catch (error) {
        console.error("Failed to save course data to localStorage:", error);
    }
}

function loadCourseData() {
    try {
        const savedData = localStorage.getItem('iconaCourseData');
        if (savedData) {
            courseData = JSON.parse(savedData);
            // After loading, ensure test questions content is dynamic
            const testSection = courseData.sections.find(s => s.type === 'test');
            if (testSection) {
                 testSection.content = testSection.content.replace(/\d+ –≤–æ–ø—Ä–æ—Å–∞/, `${testQuestions.length} –≤–æ–ø—Ä–æ—Å–∞`);
            }
            console.log("Course data loaded from localStorage.");
        } else {
            console.log("No saved data found, using default data.");
        }
    } catch (error) {
        console.error("Failed to load course data from localStorage:", error);
    }
}

function addEditModeStyles() {
    const style = document.createElement('style');
    style.textContent = `
        .edit-mode-active [contenteditable="true"] {
            outline: 2px dashed #dc3545;
            background-color: #fff9f9;
            padding: 2px;
            cursor: text;
        }
    `;
    document.head.appendChild(style);
}

function updateNavAuthState() {
  const isLoggedIn = localStorage.getItem('isLoggedIn') === '1' || localStorage.getItem('isLoggedIn') === 'true';
  const navUser = document.getElementById('nav-user');
  const loginBtn = document.getElementById('login-btn');
  const navUserName = document.getElementById('nav-user-name');
  const navUserPhoto = document.getElementById('nav-user-photo');
  if (isLoggedIn) {
    if (navUser) navUser.style.display = 'flex';
    if (loginBtn) loginBtn.style.display = 'none';
    const userData = JSON.parse(localStorage.getItem('userData') || '{}');
    if (navUserName) {
      navUserName.textContent = (userData.firstname || '') + (userData.lastname ? ' ' + userData.lastname : '') || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }
    if (navUserPhoto) {
      navUserPhoto.src = localStorage.getItem('userPhoto') || userData.photo || 'https://avatars.dicebear.com/api/personas/username.svg';
    }
  } else {
    if (navUser) navUser.style.display = 'none';
    if (loginBtn) loginBtn.style.display = 'inline-block';
  }
}
document.addEventListener('DOMContentLoaded', updateNavAuthState);
window.addEventListener('focus', updateNavAuthState);

// Global fallback function for debugging
window.testStartLearning = function() {
    console.log("Manual test function called");
    startLearning();
};

function blockNavForGuests() {
  document.querySelectorAll('.nav-item[href="roles.html"], .nav-item[href="engineer.html"], .nav-item[href="application1.html"]').forEach(link => {
    link.addEventListener('click', function(e) {
      const isLoggedIn = localStorage.getItem('isLoggedIn') === '1' || localStorage.getItem('isLoggedIn') === 'true';
      if (!isLoggedIn) {
        e.preventDefault();
        let err = document.getElementById('auth-error-msg');
        if (!err) {
          err = document.createElement('div');
          err.id = 'auth-error-msg';
          err.textContent = '–í–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å';
          err.style.position = 'fixed';
          err.style.top = '24px';
          err.style.left = '50%';
          err.style.transform = 'translateX(-50%)';
          err.style.background = '#fff';
          err.style.color = '#d32f2f';
          err.style.border = '2px solid #d32f2f';
          err.style.borderRadius = '8px';
          err.style.padding = '1em 2em';
          err.style.fontWeight = '600';
          err.style.fontSize = '1.1em';
          err.style.zIndex = '9999';
          document.body.appendChild(err);
          setTimeout(() => { err.remove(); }, 2200);
        }
      }
    });
  });
}
document.addEventListener('DOMContentLoaded', blockNavForGuests);

console.log("JavaScript loaded successfully"); 