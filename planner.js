let plannerModuleData = {
  title: "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
  totalSections: 5,
  currentSection: 1,
  progress: 0,
  keyPoints: [
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç",
    "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞",
    "–ê–Ω–∞–ª–∏–∑, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤",
    "–í–µ–¥–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"
  ],
  sections: [
    {
      id: 1,
      title: "–†–æ–ª—å –∏ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞",
      status: "current",
      type: "theory",
      duration: "10 –º–∏–Ω",
      icon: "üìÖ",
      description: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ä–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞.",
      content: `
        <div>
          <h4>–ö—Ç–æ —Ç–∞–∫–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫?</h4>
          <p>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ä–æ–∫–∞–º–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –∏–ª–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.</p>
          <ul>
            <li>–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ–±—â–∏–π –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞–±–æ—Ç</li>
            <li>–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–¥–µ—Ä–∂–∏–≤–∞–Ω–∏–µ —Å—Ä–æ–∫–æ–≤</li>
            <li>–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö</li>
          </ul>
        </div>
      `
    },
    {
      id: 2,
      title: "–í–∏–¥—ã –∏ –º–µ—Ç–æ–¥—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤",
      status: "locked",
      type: "theory",
      duration: "10 –º–∏–Ω",
      icon: "‚è≥",
      description: "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: —Å–µ—Ç–µ–≤—ã–µ, Gantt, PERT, CPM.",
      content: `
        <div>
          <h4>–¢–∏–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤:</h4>
          <ul>
            <li>–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø–ª–∞–Ω—ã</li>
            <li>–°–µ—Ç–µ–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ (PERT, CPM)</li>
            <li>–î–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞</li>
          </ul>
          <h5 class="mt-16">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h5>
          <ul>
            <li>MS Project, Spider Project, Primavera –∏ –¥—Ä.</li>
          </ul>
        </div>
      `
    },
    {
      id: 3,
      title: "–ê–Ω–∞–ª–∏–∑ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏",
      status: "locked",
      type: "theory",
      duration: "10 –º–∏–Ω",
      icon: "üìà",
      description: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è, –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫, –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–µ—Ä–∂–µ–∫.",
      content: `
        <div>
          <h4>–†–∞–±–æ—Ç–∞ —Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏:</h4>
          <ol>
            <li>–†–µ–≥—É–ª—è—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–∞—Ñ–∏–∫–∞</li>
            <li>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è</li>
            <li>–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π</li>
          </ol>
          <div class="mt-16 info-message"><strong>–°–æ–≤–µ—Ç:</strong> –§–∏–∫—Å–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ –ø–ª–∞–Ω ‚Äì –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ –±—É–¥—É—â–µ–º.</div>
        </div>
      `
    },
    {
      id: 4,
      title: "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
      status: "locked",
      type: "practice",
      duration: "10 –º–∏–Ω",
      icon: "üìù",
      description: "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç, –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤.",
      content: `
        <div>
          <h4>–ü—Ä–∞–∫—Ç–∏–∫–∞: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞</h4>
          <p>–í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å—Ö–µ–º–∞—Ç–∏—á–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —ç—Ç–∞–ø–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ø–æ —à–∞–±–ª–æ–Ω—É.</p>
          <button class="exercise-button" onclick="completeExercisePlanner(1)">–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</button>
        </div>
      `
    },
    {
      id: 5,
      title: "–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç",
      status: "locked",
      type: "test",
      duration: "10 –º–∏–Ω",
      icon: "‚úÖ",
      description: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –ø–æ –º–æ–¥—É–ª—é ¬´–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫¬ª.",
      content: `
        <div>
          <h4>–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç</h4>
          <p>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞—ë—Ç—Å—è –ø—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç 80%.</p>
          <button class="btn btn--primary btn--lg" onclick="startFinalTestPlanner()">–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
        </div>
      `
    }
  ]
};

let plannerTestQuestions = [
  {
    question: "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞?",
    options: [
      "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è",
      "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç",
      "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–∫—É–ø–æ–∫",
      "–í–µ–¥–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
    ],
    correct: 1
  },
  {
    question: "–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –∏ –∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    options: [
      "–î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞",
      "–ë–ª–æ–∫-—Å—Ö–µ–º–∞",
      "–û—Ä–≥—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
      "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
    ],
    correct: 0
  },
  {
    question: "–ß—Ç–æ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è?",
    options: [
      "–°–æ–æ–±—â–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é",
      "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
      "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
      "–ü–µ—Ä–µ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–¥—Ä—è–¥—á–∏–∫—É"
    ],
    correct: 2
  }
];

let plannerCurrentSectionIndex = 0;
let plannerCompletedSections = new Set();
let plannerProgress = 0;
let plannerTestState = {
  current: 0,
  answers: Array(plannerTestQuestions.length).fill(null),
  timer: null,
  timeLeft: 600
};
let plannerPages = {};

document.addEventListener("DOMContentLoaded", function() {
  plannerPages = {
    overview: document.getElementById("moduleOverviewPage"),
    learning: document.getElementById("learningPage"),
    test: document.getElementById("testPage"),
    certificate: document.getElementById("certificatePage")
  };
  plannerInitializeApp();
  plannerAttachEventListeners();
  plannerUpdateAuthHeader();
});

// ------------ –û–°–ù–û–í–ù–û–ô –ö–û–î ----------
function plannerInitializeApp() {
  plannerProgress = plannerModuleData.progress;
  plannerCurrentSectionIndex = plannerModuleData.currentSection - 1;
  plannerModuleData.sections.forEach((section, idx) => {
    if (section.status === "completed") plannerCompletedSections.add(idx);
  });
  plannerUpdateOverviewProgress();
  plannerRenderKeyPoints();
}
function plannerAttachEventListeners() {
  const startBtn = document.getElementById("startLearningBtn");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  const testPrevBtn = document.getElementById("testPrevBtn");
  const testNextBtn = document.getElementById("testNextBtn");
  const finishTestBtn = document.getElementById("finishTestBtn");
  const downloadCertBtn = document.getElementById("downloadCertBtn");
  const backToModulesBtn = document.getElementById("backToModulesBtn");

  if (startBtn) startBtn.addEventListener("click", plannerStartLearning);
  if (prevBtn) prevBtn.addEventListener("click", () => plannerNavigateSection(-1));
  if (nextBtn) nextBtn.addEventListener("click", () => plannerNavigateSection(1));
  if (testPrevBtn) testPrevBtn.addEventListener("click", () => plannerNavigateTest(-1));
  if (testNextBtn) testNextBtn.addEventListener("click", () => plannerNavigateTest(1));
  if (finishTestBtn) finishTestBtn.addEventListener("click", plannerFinishTest);
  if (downloadCertBtn) downloadCertBtn.addEventListener("click", plannerDownloadCertificate);
  if (backToModulesBtn) backToModulesBtn.addEventListener("click", () => plannerShowPage("overview"));
}
function plannerShowPage(page) {
  Object.values(plannerPages).forEach(pg => { if (pg) pg.classList.remove("active"); });
  if (plannerPages[page]) plannerPages[page].classList.add("active");
}
function plannerStartLearning() {
  plannerShowPage("learning");
  plannerRenderCurrentSection();
  plannerRenderSidebar();
  plannerUpdateAllProgress();
}
function plannerNavigateSection(direction) {
  const newIndex = plannerCurrentSectionIndex + direction;
  if (newIndex < 0 || newIndex >= plannerModuleData.sections.length) return;
  if (direction > 0 && !plannerCompletedSections.has(plannerCurrentSectionIndex)) {
    plannerCompletedSections.add(plannerCurrentSectionIndex);
    plannerUpdateLearningProgress();
  }
  if (newIndex > plannerCurrentSectionIndex && !plannerCompletedSections.has(plannerCurrentSectionIndex)) return;
  plannerCurrentSectionIndex = newIndex;
  plannerRenderCurrentSection();
  plannerRenderSidebar();
  plannerUpdateAllProgress();
}
function plannerRenderCurrentSection() {
  const section = plannerModuleData.sections[plannerCurrentSectionIndex];
  document.getElementById("sectionTitle").textContent = `–†–∞–∑–¥–µ–ª ${section.id}: ${section.title}`;
  document.getElementById("sectionDescription").textContent = section.description;
  document.getElementById("learningBody").innerHTML = section.content;
  plannerUpdateNavigationButtons();
}
function plannerRenderSidebar() {
  const c = document.getElementById("sidebarNavItems");
  if (!c) return;
  c.innerHTML = plannerModuleData.sections.map((s, idx) => {
    let status = "";
    if (idx === plannerCurrentSectionIndex) status = "active";
    else if (plannerCompletedSections.has(idx)) status = "completed";
    else if (idx > plannerCurrentSectionIndex) status = "locked";
    return `<div class="sidebar-nav-item ${status}" data-section="${idx}">
      <span class="sidebar-nav-icon">${s.icon}</span>
      <div>
        <div class="sidebar-nav-title">${s.title}</div>
        <small>${s.duration}</small>
      </div>
    </div>`;
  }).join("");
  c.querySelectorAll(".sidebar-nav-item").forEach(item => {
    item.addEventListener("click", function() {
      const idx = parseInt(this.dataset.section);
      if (idx <= plannerCurrentSectionIndex || plannerCompletedSections.has(idx - 1)) {
        plannerCurrentSectionIndex = idx;
        plannerRenderCurrentSection();
        plannerRenderSidebar();
        plannerUpdateAllProgress();
      } else {
        alert("–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞");
      }
    });
  });
}
function plannerRenderKeyPoints() {
  const c = document.getElementById("keyPointsList");
  if (!c) return;
  c.innerHTML = plannerModuleData.keyPoints.map(p => `<li>${p}</li>`).join('');
}
function plannerUpdateNavigationButtons() {
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  if (prevBtn) prevBtn.style.visibility = plannerCurrentSectionIndex === 0 ? "hidden" : "visible";
  if (nextBtn) {
    nextBtn.textContent = plannerCurrentSectionIndex === plannerModuleData.sections.length - 1
      ? "–ö —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç—É ‚Üí" : "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª ‚Üí";
  }
}
function plannerUpdateAllProgress() {
  plannerUpdateOverviewProgress();
  plannerUpdateLearningProgress();
}
function plannerUpdateOverviewProgress() {
  const progress = Math.round((plannerCompletedSections.size / plannerModuleData.sections.length) * 100);
  plannerProgress = progress;
  const pPercent = document.getElementById("progressPercent");
  const pFill = document.getElementById("progressFill");
  if (pPercent) pPercent.textContent = `${progress}%`;
  if (pFill) pFill.style.width = `${progress}%`;
}
function plannerUpdateLearningProgress() {
  const fill = document.getElementById("headerProgressFill");
  const text = document.getElementById("headerProgressText");
  if (fill) fill.style.width = `${plannerProgress}%`;
  if (text) text.textContent = `${plannerProgress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
}
function completeExercisePlanner(idx) {
  alert(`–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
  plannerCompletedSections.add(plannerCurrentSectionIndex);
  plannerUpdateLearningProgress();
}
// --- –¢–µ—Å—Ç –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ---
function startFinalTestPlanner() { plannerStartTest(); }
function plannerStartTest() {
  plannerCompletedSections.add(plannerCurrentSectionIndex);
  plannerUpdateAllProgress();
  plannerShowPage("test");
  plannerTestState.current = 0;
  plannerTestState.answers.fill(null);
  plannerTestState.timeLeft = 600;
  plannerRenderTestQuestion();
  plannerUpdateTestProgress();
  plannerStartTestTimer();
}
function plannerRenderTestQuestion() {
  const q = plannerTestQuestions[plannerTestState.current];
  const c = document.getElementById("testContent");
  if (!c) return;
  c.innerHTML = `
    <div class="test-question">
      <h3>–í–æ–ø—Ä–æ—Å ${plannerTestState.current + 1}</h3>
      <p>${q.question}</p>
      <div class="test-answers">
        ${q.options.map((o, i) => `
          <label class="test-answer ${plannerTestState.answers[plannerTestState.current] === i ? 'selected' : ''}">
            <input type="radio" name="plannerTestAnswer" value="${i}" ${plannerTestState.answers[plannerTestState.current] === i ? 'checked' : ''}>
            <span class="test-answer-text">${o}</span>
          </label>
        `).join('')}
      </div>
    </div>
  `;
  c.querySelectorAll('input[name="plannerTestAnswer"]').forEach(radio => {
    radio.addEventListener('change', function(e) {
      plannerTestState.answers[plannerTestState.current] = parseInt(e.target.value);
      plannerRenderTestQuestion();
    });
  });
  plannerUpdateTestNavigation();
}
function plannerUpdateTestNavigation() {
  const prevBtn = document.getElementById("testPrevBtn");
  const nextBtn = document.getElementById("testNextBtn");
  const finishBtn = document.getElementById("finishTestBtn");
  if (prevBtn) prevBtn.style.visibility = plannerTestState.current === 0 ? "hidden" : "visible";
  const isLast = plannerTestState.current === plannerTestQuestions.length - 1;
  if (nextBtn) nextBtn.classList.toggle("hidden", isLast);
  if (finishBtn) finishBtn.classList.toggle("hidden", !isLast);
}
function plannerNavigateTest(dir) {
  const newIdx = plannerTestState.current + dir;
  if (newIdx >= 0 && newIdx < plannerTestQuestions.length) {
    plannerTestState.current = newIdx;
    plannerRenderTestQuestion();
    plannerUpdateTestProgress();
  }
}
function plannerUpdateTestProgress() {
  const p = Math.round(((plannerTestState.current + 1) / plannerTestQuestions.length) * 100);
  const fill = document.getElementById("testProgressFill");
  const text = document.getElementById("testProgressText");
  if (fill) fill.style.width = `${p}%`;
  if (text) text.textContent = `–í–æ–ø—Ä–æ—Å ${plannerTestState.current + 1} –∏–∑ ${plannerTestQuestions.length}`;
}
function plannerStartTestTimer() {
  plannerUpdateTestTimer();
  if (plannerTestState.timer) clearInterval(plannerTestState.timer);
  plannerTestState.timer = setInterval(() => {
    plannerTestState.timeLeft--;
    plannerUpdateTestTimer();
    if (plannerTestState.timeLeft <= 0) {
      clearInterval(plannerTestState.timer);
      plannerFinishTest();
    }
  }, 1000);
}
function plannerUpdateTestTimer() {
  const m = Math.floor(plannerTestState.timeLeft / 60);
  const s = plannerTestState.timeLeft % 60;
  const t = document.getElementById("testTimer");
  if (t) t.textContent = `${m}:${s.toString().padStart(2, '0')}`;
}
function plannerFinishTest() {
  if (plannerTestState.timer) clearInterval(plannerTestState.timer);
  const correct = plannerTestQuestions.reduce(
    (acc, q, idx) => acc + (plannerTestState.answers[idx] === q.correct ? 1 : 0), 0
  );
  const score = Math.round((correct / plannerTestQuestions.length) * 100);
  if (score >= 80) {
    plannerProgress = 100;
    plannerUpdateAllProgress();
    plannerShowCertificate(score);
  } else {
    alert(`–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score}%. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 80%.`);
    plannerTestState.current = 0;
    plannerTestState.answers.fill(null);
    plannerTestState.timeLeft = 600;
    plannerRenderTestQuestion();
    plannerUpdateTestProgress();
    plannerStartTestTimer();
  }
}
function plannerShowCertificate(score) {
  document.getElementById("certificateDate").textContent = new Date().toLocaleDateString("ru-RU");
  document.getElementById("certificateScore").textContent = `${score}%`;
  plannerShowPage("certificate");
}
function plannerDownloadCertificate() {
  const t = `
–°–ï–†–¢–ò–§–ò–ö–ê–¢ ICONA 2.0
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
–î–∞—Ç–∞: ${new Date().toLocaleDateString("ru-RU")}
–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: ${document.getElementById("certificateScore").textContent}
`;
  const blob = new Blob([t], { type: "text/plain;charset=utf-8" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "certificate_icona_planner.txt";
  a.click();
  URL.revokeObjectURL(url);
  alert("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
}

// --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —à–∞–ø–∫–∏ ---
function plannerUpdateAuthHeader() {
  const isLoggedIn = localStorage.getItem('isLoggedIn') === '1' || localStorage.getItem('isLoggedIn') === 'true';
  const navUser = document.getElementById('nav-user');
  const loginBtn = document.getElementById('login-btn');
  const navUserName = document.getElementById('nav-user-name');
  const navUserPhoto = document.getElementById('nav-user-photo');
  let userData = {};
  try { userData = JSON.parse(localStorage.getItem('userData') || '{}'); } catch {}
  let name = (userData.firstname || '') + (userData.lastname ? ' ' + userData.lastname : '') || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  if (isLoggedIn) {
    if (navUser) navUser.style.display = 'flex';
    if (loginBtn) loginBtn.style.display = 'none';
    if (navUserName) navUserName.textContent = name;
    if (navUserPhoto) navUserPhoto.src = localStorage.getItem('userPhoto') || userData.photo || 'https://avatars.dicebear.com/api/personas/username.svg';
  } else {
    if (navUser) navUser.style.display = 'none';
    if (loginBtn) loginBtn.style.display = 'inline-block';
  }
}
window.addEventListener('focus', plannerUpdateAuthHeader);
document.addEventListener('DOMContentLoaded', plannerUpdateAuthHeader);
document.getElementById('nav-user')?.addEventListener('click', function() {
  window.location.href = 'profile.html';
});
