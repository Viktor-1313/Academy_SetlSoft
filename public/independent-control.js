let indepModuleData = {
  title: "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è",
  totalSections: 5,
  currentSection: 1,
  progress: 0,
  keyPoints: [
    "–ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç",
    "–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
    "–í–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
    "–í—ã–¥–∞—á–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
  ],
  sections: [
    {
      id: 1,
      title: "–†–æ–ª—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è",
      status: "current",
      type: "theory",
      duration: "10 –º–∏–Ω",
      icon: "üßë‚Äçüî¨",
      description: "–û—Å–Ω–æ–≤—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.",
      content: `
        <div>
          <h4>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è?</h4>
          <p>–ï–≥–æ –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤—ã—è–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π.</p>
          <ul>
            <li>–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏—ë–º–∫–∏ —Ä–∞–±–æ—Ç</li>
            <li>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∏ –∞—É–¥–∏—Ç</li>
            <li>–ó–∞—â–∏—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∑–∞–∫–∞–∑—á–∏–∫–∞</li>
          </ul>
          <div class="info-message mt-16"><strong>–í–∞–∂–Ω–æ:</strong> –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω–µ –∑–æ–Ω—ã –≤–ª–∏—è–Ω–∏—è –ø–æ–¥—Ä—è–¥—á–∏–∫–∞.</div>
        </div>
      `
    },
    {
      id: 2,
      title: "–ü—Ä–æ—Ü–µ–¥—É—Ä—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞",
      status: "locked",
      type: "theory",
      duration: "10 –º–∏–Ω",
      icon: "‚öôÔ∏è",
      description: "–ú–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–∞–±–æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.",
      content: `
        <div>
          <h4>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã</h4>
          <ol>
            <li>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∏ —Ä–∞–±–æ—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</li>
            <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å</li>
            <li>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—á–∞–Ω–∏–π, —Ñ–∏–∫—Å–∞—Ü–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π</li>
            <li>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–∫—Ç–æ–≤ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π</li>
          </ol>
          <div class="practice-exercises mt-16">
            <div class="exercise-card">
              <h6>–ü—Ä–∞–∫—Ç–∏–∫–∞: –°–æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –∫–µ–π—Å—É</h6>
              <p>–û—Ñ–æ—Ä–º–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –≤—ã—è–≤–ª–µ–Ω–Ω–æ–º—É –¥–µ—Ñ–µ–∫—Ç—É.</p>
              <button class="exercise-button" onclick="completeExerciseIC(1)">–í—ã–ø–æ–ª–Ω–∏—Ç—å</button>
            </div>
          </div>
        </div>
      `
    },
    {
      id: 3,
      title: "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
      status: "locked",
      type: "theory",
      duration: "10 –º–∏–Ω",
      icon: "üìë",
      description: "–ü—Ä–∞–≤–∏–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç—á—ë—Ç–∞–º.",
      content: `
        <div>
          <h4>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</h4>
          <ul>
            <li>–ê–∫—Ç—ã –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π</li>
            <li>–ñ—É—Ä–Ω–∞–ª—ã —Ä–∞–±–æ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è</li>
            <li>–§–æ—Ç–æ–º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
          </ul>
          <div class="info-message mt-16"><strong>–°–æ–≤–µ—Ç:</strong> –í—Å—é –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ.</div>
        </div>
      `
    },
    {
      id: 4,
      title: "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã",
      status: "locked",
      type: "practice",
      duration: "10 –º–∏–Ω",
      icon: "üß©",
      description: "–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.",
      content: `
        <div>
          <h4>–ö–µ–π—Å 1: –û—Ü–µ–Ω–∫–∞ –¥–µ—Ñ–µ–∫—Ç–∞</h4>
          <p>–î–∞–Ω–æ: —Ñ–æ—Ç–æ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–ª–æ—è –≥–∏–¥—Ä–æ–∏–∑–æ–ª—è—Ü–∏–∏. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è.</p>
          <button class="exercise-button" onclick="completeExerciseIC(2)">–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</button>
        </div>
      `
    },
    {
      id: 5,
      title: "–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç",
      status: "locked",
      type: "test",
      duration: "10 –º–∏–Ω",
      icon: "üìù",
      description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É.",
      content: `
        <div>
          <h4>–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç</h4>
          <p>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞—ë—Ç—Å—è –ø—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç 80%.</p>
          <button class="btn btn--primary btn--lg" onclick="startFinalTestIC()">–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
        </div>
      `
    }
  ]
};

// –¢–µ—Å—Ç ‚Äì –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
let indepTestQuestions = [
  {
    question: "–í —á–µ–º —Å–æ—Å—Ç–æ–∏—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è?",
    options: [
      "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º",
      "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞",
      "–¢–æ–ª—å–∫–æ –∑–∞–∫—É–ø–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
      "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–æ–≤ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    ],
    correct: 1
  },
  {
    question: "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª—è—é—Ç –ø—Ä–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ?",
    options: [
      "–¢–µ—Ö—É—Å–ª–æ–≤–∏—è –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ",
      "–ê–∫—Ç—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤ –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è",
      "–°–º–µ—Ç—ã —Ä–∞—Å—Ö–æ–¥–æ–≤",
      "–î–æ–≥–æ–≤–æ—Ä —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º"
    ],
    correct: 1
  },
  {
    question: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è?",
    options: [
      "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å",
      "–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –∞–∫—Ç–∞—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã",
      "–ó–∞–∫—Ä—ã—Ç—å –∞–∫—Ç –±–µ–∑ –∑–∞–º–µ—á–∞–Ω–∏–π",
      "–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–º"
    ],
    correct: 1
  }
];

// --- App State ---
let icCurrentSectionIndex = 0;
let icCompletedSections = new Set();
let icProgress = 0;
let icStartTime = null;
let icTestState = {
  current: 0,
  answers: Array(indepTestQuestions.length).fill(null),
  timer: null,
  timeLeft: 600
};
let icPages = {};

// --- Initialization ---
document.addEventListener("DOMContentLoaded", function() {
  icPages = {
    overview: document.getElementById("moduleOverviewPage"),
    learning: document.getElementById("learningPage"),
    test: document.getElementById("testPage"),
    certificate: document.getElementById("certificatePage")
  };
  icInitializeApp();
  icAttachEventListeners();
  icUpdateAuthHeader();
});

function icInitializeApp() {
  icProgress = indepModuleData.progress;
  icCurrentSectionIndex = indepModuleData.currentSection - 1;
  indepModuleData.sections.forEach((section, idx) => {
    if (section.status === "completed") icCompletedSections.add(idx);
  });
  icUpdateOverviewProgress();
  icRenderKeyPoints();
}

function icAttachEventListeners() {
  const startBtn = document.getElementById("startLearningBtn");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  const testPrevBtn = document.getElementById("testPrevBtn");
  const testNextBtn = document.getElementById("testNextBtn");
  const finishTestBtn = document.getElementById("finishTestBtn");
  const downloadCertBtn = document.getElementById("downloadCertBtn");
  const backToModulesBtn = document.getElementById("backToModulesBtn");

  if (startBtn) startBtn.addEventListener("click", icStartLearning);
  if (prevBtn) prevBtn.addEventListener("click", () => icNavigateSection(-1));
  if (nextBtn) nextBtn.addEventListener("click", () => icNavigateSection(1));
  if (testPrevBtn) testPrevBtn.addEventListener("click", () => icNavigateTest(-1));
  if (testNextBtn) testNextBtn.addEventListener("click", () => icNavigateTest(1));
  if (finishTestBtn) finishTestBtn.addEventListener("click", icFinishTest);
  if (downloadCertBtn) downloadCertBtn.addEventListener("click", icDownloadCertificate);
  if (backToModulesBtn) backToModulesBtn.addEventListener("click", () => icShowPage("overview"));
}

function icShowPage(page) {
  Object.values(icPages).forEach(pg => { if (pg) pg.classList.remove("active"); });
  if (icPages[page]) icPages[page].classList.add("active");
}

function icStartLearning() {
  icStartTime = Date.now();
  icShowPage("learning");
  icRenderCurrentSection();
  icRenderSidebar();
  icUpdateAllProgress();
}

function icNavigateSection(direction) {
  const newIndex = icCurrentSectionIndex + direction;
  if (newIndex < 0 || newIndex >= indepModuleData.sections.length) return;
  // –ù–µ –¥–∞–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤–ø–µ—Ä—ë–¥, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω —Ç–µ–∫—É—â–∏–π
  if (direction > 0 && !icCompletedSections.has(icCurrentSectionIndex)) {
    icCompletedSections.add(icCurrentSectionIndex);
    icUpdateLearningProgress();
  }
  if (newIndex > icCurrentSectionIndex && !icCompletedSections.has(icCurrentSectionIndex)) return;
  icCurrentSectionIndex = newIndex;
  icRenderCurrentSection();
  icRenderSidebar();
  icUpdateAllProgress();
}

function icRenderCurrentSection() {
  const section = indepModuleData.sections[icCurrentSectionIndex];
  document.getElementById("sectionTitle").textContent = `–†–∞–∑–¥–µ–ª ${section.id}: ${section.title}`;
  document.getElementById("sectionDescription").textContent = section.description;
  document.getElementById("learningBody").innerHTML = section.content;
  icUpdateNavigationButtons();
}

function icRenderSidebar() {
  const c = document.getElementById("sidebarNavItems");
  if (!c) return;
  c.innerHTML = indepModuleData.sections.map((s, idx) => {
    let status = "";
    if (idx === icCurrentSectionIndex) status = "active";
    else if (icCompletedSections.has(idx)) status = "completed";
    else if (idx > icCurrentSectionIndex) status = "locked";
    return `<div class="sidebar-nav-item ${status}" data-section="${idx}">
      <span class="sidebar-nav-icon">${s.icon}</span>
      <div>
        <div class="sidebar-nav-title">${s.title}</div>
        <small>${s.duration}</small>
      </div>
    </div>`;
  }).join("");
  c.querySelectorAll(".sidebar-nav-item").forEach(item => {
    item.addEventListener("click", function() {
      const idx = parseInt(this.dataset.section);
      if (idx <= icCurrentSectionIndex || icCompletedSections.has(idx - 1)) {
        icCurrentSectionIndex = idx;
        icRenderCurrentSection();
        icRenderSidebar();
        icUpdateAllProgress();
      } else {
        alert("–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞");
      }
    });
  });
}

function icRenderKeyPoints() {
  const c = document.getElementById("keyPointsList");
  if (!c) return;
  c.innerHTML = indepModuleData.keyPoints.map(p => `<li>${p}</li>`).join('');
}

function icUpdateNavigationButtons() {
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  if (prevBtn) prevBtn.style.visibility = icCurrentSectionIndex === 0 ? "hidden" : "visible";
  if (nextBtn) {
    nextBtn.textContent = icCurrentSectionIndex === indepModuleData.sections.length - 1
      ? "–ö —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç—É ‚Üí" : "–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª ‚Üí";
  }
}

function icUpdateAllProgress() {
  icUpdateOverviewProgress();
  icUpdateLearningProgress();
}

function icUpdateOverviewProgress() {
  const progress = Math.round((icCompletedSections.size / indepModuleData.sections.length) * 100);
  icProgress = progress;
  const pPercent = document.getElementById("progressPercent");
  const pFill = document.getElementById("progressFill");
  if (pPercent) pPercent.textContent = `${progress}%`;
  if (pFill) pFill.style.width = `${progress}%`;
}

function icUpdateLearningProgress() {
  const fill = document.getElementById("headerProgressFill");
  const text = document.getElementById("headerProgressText");
  if (fill) fill.style.width = `${icProgress}%`;
  if (text) text.textContent = `${icProgress}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
}

// --- –ü—Ä–∞–∫—Ç–∏–∫–∞, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ --
function completeExerciseIC(idx) {
  alert(`–ó–∞–¥–∞–Ω–∏–µ ${idx} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!`);
  icCompletedSections.add(icCurrentSectionIndex);
  icUpdateLearningProgress();
}

// --- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ---
function startFinalTestIC() { icStartTest(); }
function icStartTest() {
  icCompletedSections.add(icCurrentSectionIndex);
  icUpdateAllProgress();
  icShowPage("test");
  icTestState.current = 0;
  icTestState.answers.fill(null);
  icTestState.timeLeft = 600;
  icRenderTestQuestion();
  icUpdateTestProgress();
  icStartTestTimer();
}

function icRenderTestQuestion() {
  const q = indepTestQuestions[icTestState.current];
  const c = document.getElementById("testContent");
  if (!c) return;
  c.innerHTML = `
    <div class="test-question">
      <h3>–í–æ–ø—Ä–æ—Å ${icTestState.current + 1}</h3>
      <p>${q.question}</p>
      <div class="test-answers">
        ${q.options.map((o, i) => `
          <label class="test-answer ${icTestState.answers[icTestState.current] === i ? 'selected' : ''}">
            <input type="radio" name="icTestAnswer" value="${i}" ${icTestState.answers[icTestState.current] === i ? 'checked' : ''}>
            <span class="test-answer-text">${o}</span>
          </label>
        `).join('')}
      </div>
    </div>
  `;
  c.querySelectorAll('input[name="icTestAnswer"]').forEach(radio => {
    radio.addEventListener('change', function(e) {
      icTestState.answers[icTestState.current] = parseInt(e.target.value);
      icRenderTestQuestion();
    });
  });
  icUpdateTestNavigation();
}

function icUpdateTestNavigation() {
  const prevBtn = document.getElementById("testPrevBtn");
  const nextBtn = document.getElementById("testNextBtn");
  const finishBtn = document.getElementById("finishTestBtn");
  if (prevBtn) prevBtn.style.visibility = icTestState.current === 0 ? "hidden" : "visible";
  const isLast = icTestState.current === indepTestQuestions.length - 1;
  if (nextBtn) nextBtn.classList.toggle("hidden", isLast);
  if (finishBtn) finishBtn.classList.toggle("hidden", !isLast);
}

function icNavigateTest(dir) {
  const newIdx = icTestState.current + dir;
  if (newIdx >= 0 && newIdx < indepTestQuestions.length) {
    icTestState.current = newIdx;
    icRenderTestQuestion();
    icUpdateTestProgress();
  }
}
function icUpdateTestProgress() {
  const p = Math.round(((icTestState.current + 1) / indepTestQuestions.length) * 100);
  const fill = document.getElementById("testProgressFill");
  const text = document.getElementById("testProgressText");
  if (fill) fill.style.width = `${p}%`;
  if (text) text.textContent = `–í–æ–ø—Ä–æ—Å ${icTestState.current + 1} –∏–∑ ${indepTestQuestions.length}`;
}
function icStartTestTimer() {
  icUpdateTestTimer();
  if (icTestState.timer) clearInterval(icTestState.timer);
  icTestState.timer = setInterval(() => {
    icTestState.timeLeft--;
    icUpdateTestTimer();
    if (icTestState.timeLeft <= 0) {
      clearInterval(icTestState.timer);
      icFinishTest();
    }
  }, 1000);
}
function icUpdateTestTimer() {
  const m = Math.floor(icTestState.timeLeft / 60);
  const s = icTestState.timeLeft % 60;
  const t = document.getElementById("testTimer");
  if (t) t.textContent = `${m}:${s.toString().padStart(2, '0')}`;
}
function icFinishTest() {
  if (icTestState.timer) clearInterval(icTestState.timer);
  const correct = indepTestQuestions.reduce(
    (acc, q, idx) => acc + (icTestState.answers[idx] === q.correct ? 1 : 0), 0
  );
  const score = Math.round((correct / indepTestQuestions.length) * 100);
  if (score >= 80) {
    icProgress = 100;
    icUpdateAllProgress();
    icShowCertificate(score);
  } else {
    alert(`–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score}%. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 80%.`);
    icTestState.current = 0;
    icTestState.answers.fill(null);
    icTestState.timeLeft = 600;
    icRenderTestQuestion();
    icUpdateTestProgress();
    icStartTestTimer();
  }
}
function icShowCertificate(score) {
  document.getElementById("certificateDate").textContent = new Date().toLocaleDateString("ru-RU");
  document.getElementById("certificateScore").textContent = `${score}%`;
  icShowPage("certificate");
}
function icDownloadCertificate() {
  const t = `
–°–ï–†–¢–ò–§–ò–ö–ê–¢ ICONA 2.0
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è.
–î–∞—Ç–∞: ${new Date().toLocaleDateString("ru-RU")}
–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: ${document.getElementById("certificateScore").textContent}
`;
  const blob = new Blob([t], { type: "text/plain;charset=utf-8" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "certificate_icona_indepcontrol.txt";
  a.click();
  URL.revokeObjectURL(url);
  alert("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
}

// --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —à–∞–ø–∫–∏ ---
function icUpdateAuthHeader() {
  const isLoggedIn = localStorage.getItem('isLoggedIn') === '1' || localStorage.getItem('isLoggedIn') === 'true';
  const navUser = document.getElementById('nav-user');
  const loginBtn = document.getElementById('login-btn');
  const navUserName = document.getElementById('nav-user-name');
  const navUserPhoto = document.getElementById('nav-user-photo');
  let userData = {};
  try { userData = JSON.parse(localStorage.getItem('userData') || '{}'); } catch {}
  let name = (userData.firstname || '') + (userData.lastname ? ' ' + userData.lastname : '') || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  if (isLoggedIn) {
    if (navUser) navUser.style.display = 'flex';
    if (loginBtn) loginBtn.style.display = 'none';
    if (navUserName) navUserName.textContent = name;
    if (navUserPhoto) navUserPhoto.src = localStorage.getItem('userPhoto') || userData.photo || 'https://avatars.dicebear.com/api/personas/username.svg';
  } else {
    if (navUser) navUser.style.display = 'none';
    if (loginBtn) loginBtn.style.display = 'inline-block';
  }
}
window.addEventListener('focus', icUpdateAuthHeader);
document.addEventListener('DOMContentLoaded', icUpdateAuthHeader);
document.getElementById('nav-user')?.addEventListener('click', function() {
  window.location.href = 'profile.html';
});
